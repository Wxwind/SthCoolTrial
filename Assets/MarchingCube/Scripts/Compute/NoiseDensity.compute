#pragma kernel NoiseDensity
#include "./SimplexNoise.compute"

static const int numThreads = 8;
//Noise Data
RWStructuredBuffer<float4> points;
int numPointsPerAxis;
float chunkSize;
float3 center;
float3 offset;
float voxelSize;
float3 worldSize;

int indexFromCoord(int x, int y, int z)
{
    return z * numPointsPerAxis * numPointsPerAxis + y * numPointsPerAxis + x;
}

// Noise FBM settings
StructuredBuffer<float3> offsets;
int _Octaves;
float _Lacunarity;
float _Gain;
float _Frequency;
float noiseWeight;
float isoLevelOffset;
float weightMultiplier;
// float hardFloor;
// float hardFloorWeight;
//float4 params;

//以voxel为单位调用NoiseDensity
//为每个voxel的顶点生成isoLevel
[numthreads(numThreads,numThreads,numThreads)]
void NoiseDensity(int3 id : SV_DispatchThreadID)
{
    //可能线程开多了所以需要越界判断
    if (id.x >= numPointsPerAxis || id.y >= numPointsPerAxis || id.z >= numPointsPerAxis)
    {
        return;
    }

    //id(0,0,0)对应xyz最小处的顶点
    float3 pos = center + id * voxelSize - chunkSize / 2;

    //fbm(分型布朗运动，指不同频率振幅的波叠加)
    // float noise = 0;
    // float frequency = _Frequency/100;
    // float amplitude = 1;
    // float weight = 1;
    //
    //  for (int j =0; j < _Octaves; j ++) {
    //      float n = simpelxNoise(pos * frequency + offsets[j] + offset);
    //      float v = 1-abs(n);
    //      v = v*v;
    //      v *= weight;
    //      weight = max(min(v*weightMultiplier,1),0);
    //      noise += v * amplitude;
    //      amplitude *= _Gain;
    //      frequency *= _Lacunarity;
    //  }

    //更容易直观理解的FBM
    float noise = 0;
    float weight = 0;
    float frequency = _Frequency / 100;
    float amplitude = 0.5;

    for (int j = 0; j < _Octaves; j ++)
    {
        noise += simplexNoise(pos * frequency + offsets[j] + offset)*amplitude;
        weight += amplitude;
        amplitude *= _Gain;//每迭代一次幅度变化
        frequency *= _Lacunarity;//每迭代一次频率变化
    }
    noise /= weight;//防止amplitude叠加后超过simplexNoise的区间

    //float finalVal = (pos.y + floorOffset) + noise * noiseWeight + (pos.y%params.x) * params.y;
    //令y越大该点的isoLevel越大，这样保证只会生成一层地形（保证垂直方向上isoLevel唯一）
    float finalVal = pos.y - isoLevelOffset + noise * noiseWeight;

    // if (pos.y < hardFloor) {
    //     finalVal += hardFloorWeight;
    // }

    int index = indexFromCoord(id.x, id.y, id.z);
    points[index] = float4(pos, finalVal);
}
