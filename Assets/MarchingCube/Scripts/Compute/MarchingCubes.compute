#pragma kernel MarchingCubes
#include "./MarchTable.compute"

static const int numThreads = 8;

//顺序很重要，unity为左手坐标系，但左右手对三角形顺序没影响。
//以包围点3为例，3对应1000，即8，查triangulation[8]= 3 11 2，
//在右手坐标系中根据右手定则可知正确
//在左手坐标系中根据左手定则也能确定三角形朝向正确
//而y轴越大isoLevel越大，因此顺序为ABC
struct Triangle
{
    float3 vertexA;
    float3 vertexB;
    float3 vertexC;
};

AppendStructuredBuffer<Triangle> triangles;
//xyz是voxel顶点坐标，w是该点的isoLevel
RWStructuredBuffer<float4> points;

int numPointsPerAxis;
float isoLevel;


/* In Source Particle
   y
       4--------5     *---4----*
      /|       /|    /|       /|
     / |      / |   7 |      5 |
    /  |     /  |  /  8     /  9
   7--------6   | *----6---*   |
   |   |  z |   | |   |    |   |
   |   0----|---1 |   *---0|---*
   |  /     |  /  11 /     10 /
   | /      | /   | 3      | 1
   |/       |/    |/       |/
   3--------2     *---2----*   ---->x
*/

/* In Unity
   y
       7--------6     *---6----*
      /|       /|    /|       /|
     / |      / |   7 |      5 |
    /  |     /  |  / 11     /  10
   4--------5   | *----4---*   |
   |   |  z |   | |   |    |   |
   |   3----|---2 |   *---2|---*
   |  /     |  /  8  /     9  /
   | /      | /   | 3      | 1
   |/       |/    |/       |/
   0--------1     *---0----*   ---->x
*/

//w分量即该点的isoLevel(用于与等值面比较的值)
float3 isoLerp(float4 a, float4 b)
{
    float t = (isoLevel - a.w) /(b.w- a.w);
    return a.xyz + t * (b.xyz - a.xyz);
}

int indexFromCoord(int x, int y, int z)
{
    return z * numPointsPerAxis * numPointsPerAxis + y * numPointsPerAxis + x;
}


//可以参考说明https://www.cnblogs.com/shenyibo/p/13712440.html
//DispatchThreadID  = GroupId * NumThreads + GroupThreadID
//DispatchThreadID  :当前线程id
//GroupId           :外层线程id,由dispatch(kernelIndex,a,b,c)定义
//NumThreads        :内层线程数，由[numthreads(a,b,c)]定义
//GroupThreadID     :当前线程在内层线程编号
//一个voxel调用一次MarchingCubes函数
[numthreads(numThreads,numThreads,numThreads)]
void MarchingCubes(int3 id : SV_DispatchThreadID)
{
    int numVoxelPerAxis = numPointsPerAxis - 1; //一个轴上一个chunk内最多有几个voxel

    //因为外层线程数是用FloorToInt计算的，所以一个线程可能会包含邻居线程要计算的点，因此做越界判断，让每个线程只计算自己负责的范围
    //或者有可能线程开太多了有些线程的id就越界了所以也需要越界判断(id是区分线程计算哪个区域的唯一标志)
    if (id.x >= numVoxelPerAxis || id.y >= numVoxelPerAxis || id.z >= numVoxelPerAxis)
    {
        return;
    }

    //每个采样点所在voxel的8个顶点，注意要从原文的右手坐标系转换到unity的左手坐标系，因此Z轴取反
    float4 cubeCorners[8] = {
        points[indexFromCoord(id.x, id.y, id.z)],
        points[indexFromCoord(id.x + 1, id.y, id.z)],
        points[indexFromCoord(id.x + 1, id.y, id.z + 1)],
        points[indexFromCoord(id.x, id.y, id.z + 1)],
        points[indexFromCoord(id.x, id.y + 1, id.z)],
        points[indexFromCoord(id.x + 1, id.y + 1, id.z)],
        points[indexFromCoord(id.x + 1, id.y + 1, id.z + 1)],
        points[indexFromCoord(id.x, id.y + 1, id.z + 1)]
    };

    int cubeIndex = 0;
    //小于isoLevel的顶点都处于最终生成的形体内部
    for (int k = 0; k < 8; k++)
    {
        if (cubeCorners[k].w < isoLevel)
        {
            cubeIndex |= 1 << k;
        }
    }

    for (int i = 0; triangulation[cubeIndex][i] != -1; i += 3)
    {
        int a0 = cornerIndexAFromEdge[triangulation[cubeIndex][i]];
        int b0 = cornerIndexBFromEdge[triangulation[cubeIndex][i]];

        int a1 = cornerIndexAFromEdge[triangulation[cubeIndex][i + 1]];
        int b1 = cornerIndexBFromEdge[triangulation[cubeIndex][i + 1]];

        int a2 = cornerIndexAFromEdge[triangulation[cubeIndex][i + 2]];
        int b2 = cornerIndexBFromEdge[triangulation[cubeIndex][i + 2]];

        Triangle tri;
        tri.vertexA = isoLerp(cubeCorners[a0], cubeCorners[b0]);
        tri.vertexB = isoLerp(cubeCorners[a1], cubeCorners[b1]);
        tri.vertexC = isoLerp(cubeCorners[a2], cubeCorners[b2]);
        triangles.Append(tri);
    }
}
